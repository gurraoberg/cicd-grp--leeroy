<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1360.vc6700e3136f5">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2151.ve32c9d209a_3f"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2151.ve32c9d209a_3f">
      <jobProperties/>
      <triggers>
        <string>hudson.triggers.SCMTrigger</string>
      </triggers>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>H/15 * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3806.va_3a_6988277b_2">
    <script>pipeline {
    agent any
    triggers {
        pollSCM &apos;H/15 * * * *&apos;
    }


    stages {
        
        stage(&apos;Checkout&apos;) {
            steps {
                echo &apos;Checking out the git repository...&apos;
                checkout scmGit(branches: [[name: &apos;*/main&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://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@github.com/nackc8/cicd-grp--leeroy.git&apos;]])
            }
        }

        stage(&apos;Creating venv&apos;) {
            steps {
                echo &quot;Installing dependencies...&quot;
                sh &apos;&apos;&apos;
                cd backend &amp;&amp; python3 -m venv venv &amp;&amp; source venv/bin/activate &amp;&amp; pip install -r requirements.txt
                &apos;&apos;&apos;
            }
        }
        
        stage(&apos;Run Pytest&apos;) {
            steps {
                echo &quot;Installing dependencies...&quot;
                sh &apos;&apos;&apos;
                source ../venv/backend/venv/bin/activate &amp;&amp; cd backend &amp;&amp; pytest .
                &apos;&apos;&apos;
            }
        }


        stage(&apos;Run Pylint&apos;) {
            steps {
                echo &quot;Running the script...&quot;
                sh &apos;&apos;&apos;
                source ../venv/backend/venv/bin/activate &amp;&amp; cd backend &amp;&amp; pylint --fail-under 8 pingurl/
                &apos;&apos;&apos;
            }
        }


        stage(&apos;Build&apos;) {
            steps {
                script {
                    def containerExists = sh(script: &apos;docker ps -a | grep api &gt;/dev/null&apos;, returnStatus: true) == 0

                    if (containerExists) {
                        sh &apos;docker stop api || true&apos;
                        sh &apos;docker rm api || true&apos;
                    }

                    sh &apos;docker build -t api -f Docker/Dockerfile.backend .&apos;
                }
            }
        }

        stage(&apos;Run Container&apos;) {
            steps {
                echo &quot;Running the script....&quot;
                sh &apos;&apos;&apos;
                docker run -d -p 5000:5000 --name api api
                &apos;&apos;&apos;
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>